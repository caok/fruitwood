upstream bestgmnh {
  # for UNIX domain socket setups:
  server unix:/tmp/unicorn.fruitwood.sock fail_timeout=0;

  # for TCP setups, point these to your backend servers
  # server 192.168.0.7:8080 fail_timeout=0;
  # server 192.168.0.8:8080 fail_timeout=0;
}

server {
  server_name www.bestgmnh.com *.bestgmnh.com;
  rewrite ^ http://bestgmnh.com$request_uri? permanent;
}

server {
  listen 80 default;
  server_name bestgmnh.com;

  root /u/apps/fruitwood/current/public;
  access_log /var/log/nginx/fruitwood-access.log;
  rewrite_log on;

  client_max_body_size 4G;
  keepalive_timeout 5;

  location / {
    #all requests are sent to the UNIX socket
    proxy_pass  http://bestgmnh;
    proxy_redirect     off;

    proxy_set_header   Host             $host;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;

    client_max_body_size       10m;
    client_body_buffer_size    128k;

    proxy_connect_timeout      90;
    proxy_send_timeout         90;
    proxy_read_timeout         90;

    proxy_buffer_size          4k;
    proxy_buffers              4 32k;
    proxy_busy_buffers_size    64k;
    proxy_temp_file_write_size 64k;
  }

  # if the request is for a static resource, nginx should serve it directly
  # and add a far future expires header to it, making the browser
  # cache the resource and navigate faster over the website
  # this probably needs some work with Rails 3.1's asset pipe_line
  location ~ ^/(assets)/  {
    root /u/apps/fruitwood/current/public;
    gzip_static on;
    expires max;
    add_header Cache-Control public;
    break;
  }

  location ~ ^/(uploads)/  {
    root /u/apps/fruitwood/current/public;
    expires max;
    break;
  }

  # Rails error pages
  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root /u/apps/fruitwood/current/public;
  }
}
